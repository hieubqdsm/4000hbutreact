{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","deathLine","calculateTimeLeft","Date","getFullYear","difference","timeLeft","days","Math","floor","hours","minutes","seconds","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","calculateHoursLeft","different","hoursLeft","hourComponents","setHoursLeft","className","src","logo","alt","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAe,MAA0B,iC,MC6F1BA,MAzFf,WACI,IAAMC,EAAY,gCACZC,EAAoB,YACX,IAAIC,MAAOC,cAAtB,IACMC,GAAc,IAAIF,KAAKF,IAAc,IAAIE,KAC3CG,EAAW,GAWf,OATID,EAAa,IACbC,EAAW,CACPC,KAAMC,KAAKC,MAAMJ,EAAU,OAC3BK,MAAOF,KAAKC,MAAOJ,EAAU,KAAuB,IACpDM,QAASH,KAAKC,MAAOJ,EAAa,IAAO,GAAM,IAC/CO,QAASJ,KAAKC,MAAOJ,EAAa,IAAQ,MAI3CC,GAhBA,EAoBqBO,mBAASX,KApB9B,mBAoBJI,EApBI,KAoBMQ,EApBN,OAqBID,oBAAS,IAAIV,MAAOC,eArBxB,oBAsBXW,qBAAU,WACNC,YAAW,WACPF,EAAYZ,OACb,QAGP,IAAMe,EAAkB,GAExBC,OAAOC,KAAKb,GAAUc,SAAQ,SAACC,GACtBf,EAASe,IAIdJ,EAAgBK,KACZ,iCACHhB,EAASe,GADN,IACkBA,EAAU,WAMpC,IAAME,EAAqB,WACvB,IAAMC,GAAa,IAAIrB,KAAKF,IAAc,IAAIE,KAC1CsB,EAAY,GAMhB,OALID,EAAY,IACZC,EAAY,CACRf,MAAOF,KAAKC,MAAOe,EAAS,QAG7BC,GAELC,EAAiB,GArDZ,EAsDuBb,mBAASU,KAtDhC,mBAsDJE,EAtDI,KAsDOE,EAtDP,KAyEX,OAlBAT,OAAOC,KAAKM,GAAWL,SAAQ,SAACC,GACvBI,EAAUJ,IAIfK,EAAeJ,KACX,iCACHG,EAAUJ,GAAW,iBAK1BN,qBAAU,WACNC,YAAW,WACPW,EAAaJ,OACd,QAIH,qBAAKK,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,4BACKL,EAAeM,OAASN,EAAiB,gDAE9C,4BACKT,EAAgBe,OAASf,EAAkB,sDCzEjDgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f77801a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {useEffect, useState} from \"react\";\n\nfunction App() {\n    const deathLine = \"Friday, 4 June 2021, 18:50:00\";\n    const calculateTimeLeft = () => {\n        let year = new Date().getFullYear();\n        const difference = +new Date(deathLine) - +new Date();\n        let timeLeft = {};\n\n        if (difference > 0) {\n            timeLeft = {\n                days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n                minutes: Math.floor((difference / 1000 / 60) % 60),\n                seconds: Math.floor((difference / 1000) % 60),\n            };\n        }\n\n        return timeLeft;\n    };\n\n\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n    const [year] = useState(new Date().getFullYear());\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeLeft(calculateTimeLeft());\n        }, 1000);\n    });\n\n    const timerComponents = [];\n\n    Object.keys(timeLeft).forEach((interval) => {\n        if (!timeLeft[interval]) {\n            return;\n        }\n\n        timerComponents.push(\n            <span>\n        {timeLeft[interval]} {interval}{\" \"}\n      </span>\n        );\n    });\n\n\n    const calculateHoursLeft = () => {\n        const different = +new Date(deathLine) - +new Date();\n        let hoursLeft = {};\n        if (different > 0) {\n            hoursLeft = {\n                hours: Math.floor((different / (1000 * 60 * 60))),\n            }\n        }\n        return hoursLeft;\n    }\n    const hourComponents = [];\n    const [hoursLeft, setHoursLeft] = useState(calculateHoursLeft());\n    Object.keys(hoursLeft).forEach((interval) => {\n        if (!hoursLeft[interval]) {\n            return;\n        }\n\n        hourComponents.push(\n            <span>\n        {hoursLeft[interval]}{\"h left!\"}\n      </span>\n        );\n    });\n\n    useEffect(() => {\n        setTimeout(() => {\n            setHoursLeft(calculateHoursLeft());\n        }, 1000);\n    })\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    {hourComponents.length ? hourComponents : <span>Time's up!</span>}\n                </p>\n                <p>\n                    {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n                </p>\n            </header>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}